generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model champions {
  id    Int    @id @default(autoincrement()) @db.UnsignedInt
  key   String @db.VarChar(50)
  name  String @db.VarChar(50)
  title String @db.VarChar(50)
}

model matches {
  id                   Int            @id @default(autoincrement()) @db.UnsignedInt
  match_id             String         @unique @db.VarChar(50)
  game_start_timestamp BigInt
  game_end_timestamp   BigInt
  queue_id             String         @db.VarChar(50)
  queue                queue_types?   @relation(fields: [queue_id], references: [queue_id])
  participants         participants[]
}

model participants {
  id                                 Int      @id @default(autoincrement()) @db.UnsignedInt
  uuid                               String   @db.VarChar(100)
  match_id                           String   @db.VarChar(100)
  champion_name                      String?  @db.VarChar(100)
  champion_level                     Int
  champion_experience                Int
  damage_dealt_to_buildings          Int
  damage_dealt_to_objectives         Int
  damage_dealt_to_turrets            Int
  damage_self_mitigated              Int
  deaths                             Int
  assists                            Int
  double_kills                       Int
  dragon_kills                       Int
  first_blood_assist                 Boolean
  first_blood_kill                   Boolean
  first_tower_assist                 Boolean
  first_tower_kill                   Boolean
  game_ended_in_surrender            Boolean
  gold_earned                        Int
  gold_spent                         Int
  individual_position                String   @db.VarChar(50)
  inhibitor_kills                    Int
  inhibitor_takedowns                Int
  killing_sprees                     Int
  kills                              Int
  lane                               String   @db.VarChar(50)
  largest_critical_strike            Int
  largest_killing_spree              Int
  largest_multikill                  Int
  longest_time_spent_living          Int
  magic_damage_dealt                 Int
  magic_damage_dealt_to_champions    Int
  magic_damage_taken                 Int
  neutral_minions_killed             Int
  penta_kills                        Int
  physical_damage_dealt              Int
  physical_damage_dealt_to_champions Int
  physical_damage_taken              Int
  quadra_kills                       Int
  lane_role                          String   @db.VarChar(50)
  team_position                      String   @db.VarChar(50)
  total_damage_dealt                 Int
  total_damage_dealt_to_champions    Int
  total_damageshielded_on_teammates  Int
  total_damage_taken                 Int
  total_heal                         Int
  total_heals_on_teammates           Int
  total_minions_killed               Int
  total_time_CC_dealt                Int
  total_units_healed                 Int
  triple_kills                       Int
  true_damage_dealt                  Int
  true_damage_dealt_to_champions     Int
  true_damage_taken                  Int
  turret_kills                       Int
  turret_takedowns                   Int
  turrets_lost                       Int
  unreal_kills                       Int
  vision_wards_bought_in_game        Int
  wards_killed                       Int
  wards_placed                       Int
  win                                Boolean
  summoner_id                        String   @db.VarChar(100)
  vision_score                       Int
  match                              matches? @relation(fields: [match_id], references: [match_id])
  user                               users?   @relation(fields: [uuid], references: [uuid])

  @@index([match_id], map: "FK_participants_matches")
  @@index([uuid], map: "FK_participants_participants")
}

model users {
  id              Int              @id @default(autoincrement()) @db.UnsignedInt
  uuid            String?          @unique @db.VarChar(100)
  game_name       String?          @db.VarChar(50)
  tag_line        String?          @db.VarChar(50)
  discord_user_id String?          @db.VarChar(50)
  participants    participants[]
  users_discords  users_discords[]
}

model discords {
  id             Int              @id @default(autoincrement()) @db.UnsignedInt
  discord_id     String           @unique(map: "discord_id") @db.VarChar(50)
  users_discords users_discords[]
}

model users_discords {
  id         Int @id @default(autoincrement()) @db.UnsignedInt
  user_id    Int @db.UnsignedInt
  discord_id Int @db.UnsignedInt

  user    users?    @relation(fields: [user_id], references: [id])
  discord discords? @relation(fields: [discord_id], references: [id])
}

model queue_types {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  queue_id    String    @unique(map: "queue_id") @default("") @db.VarChar(50)
  map         String?   @db.VarChar(1024)
  description String?   @db.VarChar(1024)
  notes       String?   @db.VarChar(1024)
  matches     matches[]
}

model historical_leaderboards {
  id                    BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  leaderboard_timestamp BigInt
  discord_id            BigInt
  leaderboard_data      String? @db.LongText()
}
